(()=>{"use strict";var n={212:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(15),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/meyerreset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}"],sourceRoot:""}]);const s=i},426:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(15),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,":root {\n  --background-light-blue: rgb(245, 246, 247);\n  --gray-0: #323335;\n  --gray-1: #505153;\n  --gray-2: #93959b;\n  --gray-3: #93959b;\n  --gray-4: #aaaeb8;\n  --gray-5: #c3c5c7;\n  --gray-6: #dbdee0;\n  --gray-7: #e8ebec;\n  --gray-8: #f5f6f7;\n  --red-1: rgb(248, 77, 105);\n  --brown-1: rgb(184, 152, 105);\n  --yellow-1: rgb(253, 183, 32);\n  --lime-1: rgb(115, 224, 88);\n  --forest-1: rgb(56, 170, 117);\n  --blue-1: rgb(59, 118, 228);\n\n  --sidebar-width: 15rem;\n}\nhtml {\n  font-size: 16px;\n  font-family: 'Source Sans Pro', 'Helvetica', 'Arial', sans-serif;\n}\n/* .app-header {\n  background-color: #ddd;\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 4em;\n  width: 100%;\n} */\n.app-container {\n  display: grid;\n  grid-template-columns: var(--sidebar-width) 1fr;\n  height: 100vh;\n}\n/* Adds a shadow behind the main area */\n/* .app-container::after {\n  z-index: 100;\n  position: fixed;\n  top: 0;\n  right: 0;\n  height: 100vh;\n  width: calc(100vw - var(--sidebar-width));\n  background-color: rgba(255,255,255,0);\n  box-shadow: 0 0 16px rgba(80,80,80,0.08);\n  content: \"\";\n  pointer-events: none;\n} */\n.app-sidebar {\n  font-size: 0.93rem;\n  /* background-color: var(--background-light-blue); */\n  background-color: var(--gray-8);\n  height: calc(100% - 2.6rem);\n  width: var(--sidebar-width);\n  /* display: flex;\n  flex-direction: column;\n  justify-content: space-between; */\n  display: inline-block;\n  overflow: auto;\n}\n.app-lists {\n  margin: 2rem 1.2rem;\n}\n.sidebar-list {\n  color: var(--gray-1);\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  /* width: 100%; */\n  padding: 0.45rem 0.4rem;\n  border-radius: 5px;\n  transition: background-color 0.2s;\n  cursor: pointer;\n}\n.sidebar-list:hover {\n  background-color: var(--gray-6);\n}\n.sidebar-list-selected {\n  background-color: var(--gray-6);\n}\n.sidebar-list-left {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n}\n.sidebar-list-right {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n}\n.sidebar-list-icon {\n  text-align: center;\n  font-size: 1em;\n  width: 1.6rem;\n  position: relative;\n  top: 0.05em;\n  right: 0.2em;\n}\n.fa-inbox {\n  color: var(--blue-1);\n  font-size: 0.9em;\n}\n.fa-star {\n  color: var(--yellow-1);\n}\n.fa-calendar-alt {\n  color: var(--red-1);\n}\n.main-footer-buttons .fa-calendar-alt {\n  color: var(--gray-5);\n}\n.fa-layer-group {\n  color: var(--gray-4);\n}\n.anytime {\n  color: var(--forest-1);\n}\n.fa-archive {\n  color: var(--brown-1);\n}\n.fa-book {\n  color: var(--lime-1);\n}\n.fa-trash {\n  color: var(--gray-2);\n}\n.fa-border-all {\n  color: var(--gray-2);\n}\n.fa-arrow-right {\n  color: var(--gray-5);\n}\n.fa-search {\n  color: var(--gray-2);\n}\n.sidebar-list-progress {\n  margin-left: 0.18em;\n  margin-right: 0.45em;\n  width: 1em;\n  height: 1em;\n  border: 2px solid var(--gray-2);\n  border-radius: 100%;\n  box-sizing: border-box;\n  position: relative;\n  /* bottom: 0.5em; */\n}\n.qty {\n  \n}\n.qty-alert {\n  color: white;\n  background-color: var(--red-1);\n  font-size: 0.88em;\n  padding: 0.13em 0.5em 0.15em 0.5em;\n  border-radius: 100px;\n  margin-right: 0.5em;\n  position: relative;\n  bottom: 0.13em;\n}\n.bold {\n  font-weight: bold;\n}\n.divider-sm {\n  width: 100%;\n  height: 0.8em;\n}\n.divider-md {\n  width: 100%;\n  height: 1.4em;\n}\n.divider-lg {\n  width: 100%;\n  height: 2em;\n}\n.app-sidebar-footer {\n  display: flex;\n  flex-direction: row;\n  color: var(--gray-1);\n  background-color: var(--background-light-blue);\n  border-top: 1px solid var(--gray-6);\n  box-sizing: border-box;\n  width: var(--sidebar-width);\n  padding: 0.9rem 1.5rem;\n  position: fixed;\n  bottom: 0;\n  cursor: pointer;\n  transition: color 0.15s;\n}\n.fa-plus {\n  color: var(--gray-2);\n  transition: color 0.15s;\n}\n.app-sidebar-footer:hover {\n  color: var(--blue-1);\n}\n.app-sidebar-footer:hover .fa-plus{\n  color: var(--blue-1);\n}\n.app-main-footer {\n  font-size: 0.93rem;\n  color: var(--gray-1);\n  background-color: white;\n  border-top: 1px solid var(--gray-6);\n  border-left: 1px solid var(--gray-6);\n  box-sizing: border-box;\n  padding: 0 1.5rem;\n  width: calc(100% - var(--sidebar-width));\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  /* box-shadow: 0 0 12px rgba(80,80,80,0.1); */\n}\n.main-footer-buttons {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  max-width: 20em;\n  margin: 0 auto;\n}\n.main-footer-button {\n  cursor: pointer;\n  transition: color 0.15s;\n  padding: 0.9rem 1.5rem;\n}\n.main-footer-button:hover {\n  color: var(--blue-1);\n}\n.app-main {\n  color: var(--gray-1);\n  background-color: white;\n  height: calc(100% - 2.6rem);\n  border-left: 1px solid var(--gray-6);\n  /* box-shadow: 0 0 12px rgba(80,80,80,0.1); */\n  box-sizing: border-box;\n  display: inline-block;\n  overflow: auto;\n}\n.list-content {\n  /* border: 1px solid var(--gray-5); */\n  box-sizing: border-box;\n  margin: 4.6rem 4rem;\n  max-width: 75ch;\n  min-width: 30ch;\n}\n.list-content-header {\n  font-size: 1em;\n}\n.list-title-progress {\n  margin-right: 0.5em;\n  width: 1.6em;\n  height: 1.6em;\n  border: 3px solid var(--blue-1);\n  border-radius: 100%;\n  box-sizing: border-box;\n  display: inline-block;\n  position: relative;\n  top: 0.2em;\n}\n.list-title {\n  color: var(--gray-1);\n  font-weight: bold;\n  font-size: 1.8em;\n  margin-bottom: 0.6rem;\n  display: inline-block;\n}\n.list-description {\n  font-size: 1.05em;\n  margin-bottom: 2em;\n}\n.list-filters {\n  font-size: 0.98em;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  margin: 2.2em 0 2.8em 0;;\n}\n.list-filter {\n  color: var(--gray-3);\n  margin-right: 0.1em;\n  padding: 0.3em 0.7em 0.2em 0.7em;\n  border-radius: 100px;\n  transition: color 0.15s, background-color 0.2s;\n  cursor: pointer;\n}\n.list-filter:hover {\n  background-color: var(--gray-7);\n}\n.list-filter-selected {\n  color: white;\n  margin-right: 0.5em;\n  background-color: var(--gray-5);\n}\n.list-content-main {\nfont-size: 0.98em;\n}\n.section-header {\n  width: 100%;\n  padding-bottom: 0.6em;\n  /* background-color: var(--gray-8); */\n  /* margin-bottom: 0.6em; */\n  /* border-bottom: 1px solid var(--gray-5); */\n}\n.section-header h2 {\n  font-size: 1.05em;\n  font-weight: 700;\n  text-transform: uppercase;\n  letter-spacing: 0.13em;\n  color: var(--gray-1);\n}\n.list-items {\n}\n.list-item {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 0.4em 0;\n  cursor: pointer;\n  transition: color 0.2s;\n  /* position: relative; */\n}\n.list-item:hover {\n  color: var(--gray-3);\n}\n.list-item-completed div {\n  text-decoration: line-through;\n  color: var(--gray-5);\n}\n.list-item-completed .list-item-box {\n  background-color: var(--gray-6);\n}\n.list-item-box {\n  margin-right: 0.5em;\n  width: 1em;\n  height: 1em;\n  border: 1px solid var(--gray-4);\n  border-radius: 100px;\n  display: inline-block;\n  position: relative;\n  /* top: 0.25em; */\n}\n.list-item-label {\n  color: var(--gray-4);\n  margin-left: 0.5em;\n  margin-top: -0.5em;\n  margin-bottom: -0.5em;\n  padding: 0.2em 0.6em 0.2em 0.7em;\n  border-radius: 100px;\n  border: 1px solid var(--gray-4);\n  font-size: 0.75em;\n  display: inline-block;\n  position: relative;\n  bottom: 0.05em;\n}\n.item-name {\n  display: inline-block;\n}\n.item-details {\n  padding-top: 0.3em;\n  display: flex;\n  flex-direction: row;\n  font-size: 0.88em;\n}\n.item-details div {\n  font-weight: 600;\n  padding-right: 0.7em;\n}\n.item-due-date {\n  color: var(--forest-1);\n}\n.item-duration {\n  color: var(--forest-1);\n}\n.item-notes {\n  color: var(--yellow-1);\n}\n.add-dialog {\n  width: 80%;\n  padding: 1em;\n  border: 1px solid var(--gray-6);\n  border-radius: 0.5em;\n  margin-top: 0.75em;\n}\n.a-d-name {\n  /* font-size: 1em; */\n  font-weight: 700;\n  box-sizing: border-box;\n  width: 100%;\n  margin-bottom: 2px;\n}\n.a-d-notes {\n  font-family: 'Source Sans Pro', 'Helvetica', 'Arial', sans-serif;\n  box-sizing: border-box;\n  width: 100%;\n  height: 4.4em;\n}\n.a-d-footer {\n  box-sizing: border-box;\n  display: grid;\n  grid-template-columns: 31% 22.5% 22.5% 22.5%;\n  column-gap: 0.5%;\n}\n.a-d-date {\n  /* box-sizing: border-box; */\n  font-family: 'Source Sans Pro', 'Helvetica', 'Arial', sans-serif;\n}\n.a-d-list {\n  /* box-sizing: border-box; */\n}\n.a-d-priority {\n  /* box-sizing: border-box; */\n}\n.a-d-duration {\n  /* box-sizing: border-box; */\n}\n.add-task-btn {\n  padding: 0.3em 0.8em;\n  margin: 0.6em 0.1em 0 1em;\n}\n.cancel-task-btn {\n  padding: 0.3em 0.8em;\n  margin: 0.6em 0 0 0.1em;\n}\n.context-menu {\n  color: var(--gray-8);\n  position: absolute;\n  cursor: pointer;\n}\n.context-menu-delete {\n  background-color: var(--gray-0);\n  padding: 0.5em 0.75em;\n  transition: background-color 0.2s;\n}\n.context-menu-delete:hover {\n  background-color: var(--blue-1);\n}\np {\n  line-height: 1.4em;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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AACA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,iBAAiB;EACjB,aAAa;EACb,mBAAmB;EACnB,2BAA2B;EAC3B,uBAAuB;AACzB;AACA;EACE,oBAAoB;EACpB,mBAAmB;EACnB,gCAAgC;EAChC,oBAAoB;EACpB,8CAA8C;EAC9C,eAAe;AACjB;AACA;EACE,+BAA+B;AACjC;AACA;EACE,YAAY;EACZ,mBAAmB;EACnB,+BAA+B;AACjC;AACA;AACA,iBAAiB;AACjB;AACA;EACE,WAAW;EACX,qBAAqB;EACrB,qCAAqC;EACrC,0BAA0B;EAC1B,4CAA4C;AAC9C;AACA;EACE,iBAAiB;EACjB,gBAAgB;EAChB,yBAAyB;EACzB,sBAAsB;EACtB,oBAAoB;AACtB;AACA;AACA;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,gBAAgB;EAChB,eAAe;EACf,sBAAsB;EACtB,wBAAwB;AAC1B;AACA;EACE,oBAAoB;AACtB;AACA;EACE,6BAA6B;EAC7B,oBAAoB;AACtB;AACA;EACE,+BAA+B;AACjC;AACA;EACE,mBAAmB;EACnB,UAAU;EACV,WAAW;EACX,+BAA+B;EAC/B,oBAAoB;EACpB,qBAAqB;EACrB,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,oBAAoB;EACpB,kBAAkB;EAClB,kBAAkB;EAClB,qBAAqB;EACrB,gCAAgC;EAChC,oBAAoB;EACpB,+BAA+B;EAC/B,iBAAiB;EACjB,qBAAqB;EACrB,kBAAkB;EAClB,cAAc;AAChB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,kBAAkB;EAClB,aAAa;EACb,mBAAmB;EACnB,iBAAiB;AACnB;AACA;EACE,gBAAgB;EAChB,oBAAoB;AACtB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,UAAU;EACV,YAAY;EACZ,+BAA+B;EAC/B,oBAAoB;EACpB,kBAAkB;AACpB;AACA;EACE,oBAAoB;EACpB,gBAAgB;EAChB,sBAAsB;EACtB,WAAW;EACX,kBAAkB;AACpB;AACA;EACE,gEAAgE;EAChE,sBAAsB;EACtB,WAAW;EACX,aAAa;AACf;AACA;EACE,sBAAsB;EACtB,aAAa;EACb,4CAA4C;EAC5C,gBAAgB;AAClB;AACA;EACE,4BAA4B;EAC5B,gEAAgE;AAClE;AACA;EACE,4BAA4B;AAC9B;AACA;EACE,4BAA4B;AAC9B;AACA;EACE,4BAA4B;AAC9B;AACA;EACE,oBAAoB;EACpB,yBAAyB;AAC3B;AACA;EACE,oBAAoB;EACpB,uBAAuB;AACzB;AACA;EACE,oBAAoB;EACpB,kBAAkB;EAClB,eAAe;AACjB;AACA;EACE,+BAA+B;EAC/B,qBAAqB;EACrB,iCAAiC;AACnC;AACA;EACE,+BAA+B;AACjC;AACA;EACE,kBAAkB;AACpB",sourcesContent:[":root {\n  --background-light-blue: rgb(245, 246, 247);\n  --gray-0: #323335;\n  --gray-1: #505153;\n  --gray-2: #93959b;\n  --gray-3: #93959b;\n  --gray-4: #aaaeb8;\n  --gray-5: #c3c5c7;\n  --gray-6: #dbdee0;\n  --gray-7: #e8ebec;\n  --gray-8: #f5f6f7;\n  --red-1: rgb(248, 77, 105);\n  --brown-1: rgb(184, 152, 105);\n  --yellow-1: rgb(253, 183, 32);\n  --lime-1: rgb(115, 224, 88);\n  --forest-1: rgb(56, 170, 117);\n  --blue-1: rgb(59, 118, 228);\n\n  --sidebar-width: 15rem;\n}\nhtml {\n  font-size: 16px;\n  font-family: 'Source Sans Pro', 'Helvetica', 'Arial', sans-serif;\n}\n/* .app-header {\n  background-color: #ddd;\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 4em;\n  width: 100%;\n} */\n.app-container {\n  display: grid;\n  grid-template-columns: var(--sidebar-width) 1fr;\n  height: 100vh;\n}\n/* Adds a shadow behind the main area */\n/* .app-container::after {\n  z-index: 100;\n  position: fixed;\n  top: 0;\n  right: 0;\n  height: 100vh;\n  width: calc(100vw - var(--sidebar-width));\n  background-color: rgba(255,255,255,0);\n  box-shadow: 0 0 16px rgba(80,80,80,0.08);\n  content: \"\";\n  pointer-events: none;\n} */\n.app-sidebar {\n  font-size: 0.93rem;\n  /* background-color: var(--background-light-blue); */\n  background-color: var(--gray-8);\n  height: calc(100% - 2.6rem);\n  width: var(--sidebar-width);\n  /* display: flex;\n  flex-direction: column;\n  justify-content: space-between; */\n  display: inline-block;\n  overflow: auto;\n}\n.app-lists {\n  margin: 2rem 1.2rem;\n}\n.sidebar-list {\n  color: var(--gray-1);\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  /* width: 100%; */\n  padding: 0.45rem 0.4rem;\n  border-radius: 5px;\n  transition: background-color 0.2s;\n  cursor: pointer;\n}\n.sidebar-list:hover {\n  background-color: var(--gray-6);\n}\n.sidebar-list-selected {\n  background-color: var(--gray-6);\n}\n.sidebar-list-left {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n}\n.sidebar-list-right {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n}\n.sidebar-list-icon {\n  text-align: center;\n  font-size: 1em;\n  width: 1.6rem;\n  position: relative;\n  top: 0.05em;\n  right: 0.2em;\n}\n.fa-inbox {\n  color: var(--blue-1);\n  font-size: 0.9em;\n}\n.fa-star {\n  color: var(--yellow-1);\n}\n.fa-calendar-alt {\n  color: var(--red-1);\n}\n.main-footer-buttons .fa-calendar-alt {\n  color: var(--gray-5);\n}\n.fa-layer-group {\n  color: var(--gray-4);\n}\n.anytime {\n  color: var(--forest-1);\n}\n.fa-archive {\n  color: var(--brown-1);\n}\n.fa-book {\n  color: var(--lime-1);\n}\n.fa-trash {\n  color: var(--gray-2);\n}\n.fa-border-all {\n  color: var(--gray-2);\n}\n.fa-arrow-right {\n  color: var(--gray-5);\n}\n.fa-search {\n  color: var(--gray-2);\n}\n.sidebar-list-progress {\n  margin-left: 0.18em;\n  margin-right: 0.45em;\n  width: 1em;\n  height: 1em;\n  border: 2px solid var(--gray-2);\n  border-radius: 100%;\n  box-sizing: border-box;\n  position: relative;\n  /* bottom: 0.5em; */\n}\n.qty {\n  \n}\n.qty-alert {\n  color: white;\n  background-color: var(--red-1);\n  font-size: 0.88em;\n  padding: 0.13em 0.5em 0.15em 0.5em;\n  border-radius: 100px;\n  margin-right: 0.5em;\n  position: relative;\n  bottom: 0.13em;\n}\n.bold {\n  font-weight: bold;\n}\n.divider-sm {\n  width: 100%;\n  height: 0.8em;\n}\n.divider-md {\n  width: 100%;\n  height: 1.4em;\n}\n.divider-lg {\n  width: 100%;\n  height: 2em;\n}\n.app-sidebar-footer {\n  display: flex;\n  flex-direction: row;\n  color: var(--gray-1);\n  background-color: var(--background-light-blue);\n  border-top: 1px solid var(--gray-6);\n  box-sizing: border-box;\n  width: var(--sidebar-width);\n  padding: 0.9rem 1.5rem;\n  position: fixed;\n  bottom: 0;\n  cursor: pointer;\n  transition: color 0.15s;\n}\n.fa-plus {\n  color: var(--gray-2);\n  transition: color 0.15s;\n}\n.app-sidebar-footer:hover {\n  color: var(--blue-1);\n}\n.app-sidebar-footer:hover .fa-plus{\n  color: var(--blue-1);\n}\n.app-main-footer {\n  font-size: 0.93rem;\n  color: var(--gray-1);\n  background-color: white;\n  border-top: 1px solid var(--gray-6);\n  border-left: 1px solid var(--gray-6);\n  box-sizing: border-box;\n  padding: 0 1.5rem;\n  width: calc(100% - var(--sidebar-width));\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  /* box-shadow: 0 0 12px rgba(80,80,80,0.1); */\n}\n.main-footer-buttons {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  max-width: 20em;\n  margin: 0 auto;\n}\n.main-footer-button {\n  cursor: pointer;\n  transition: color 0.15s;\n  padding: 0.9rem 1.5rem;\n}\n.main-footer-button:hover {\n  color: var(--blue-1);\n}\n.app-main {\n  color: var(--gray-1);\n  background-color: white;\n  height: calc(100% - 2.6rem);\n  border-left: 1px solid var(--gray-6);\n  /* box-shadow: 0 0 12px rgba(80,80,80,0.1); */\n  box-sizing: border-box;\n  display: inline-block;\n  overflow: auto;\n}\n.list-content {\n  /* border: 1px solid var(--gray-5); */\n  box-sizing: border-box;\n  margin: 4.6rem 4rem;\n  max-width: 75ch;\n  min-width: 30ch;\n}\n.list-content-header {\n  font-size: 1em;\n}\n.list-title-progress {\n  margin-right: 0.5em;\n  width: 1.6em;\n  height: 1.6em;\n  border: 3px solid var(--blue-1);\n  border-radius: 100%;\n  box-sizing: border-box;\n  display: inline-block;\n  position: relative;\n  top: 0.2em;\n}\n.list-title {\n  color: var(--gray-1);\n  font-weight: bold;\n  font-size: 1.8em;\n  margin-bottom: 0.6rem;\n  display: inline-block;\n}\n.list-description {\n  font-size: 1.05em;\n  margin-bottom: 2em;\n}\n.list-filters {\n  font-size: 0.98em;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  margin: 2.2em 0 2.8em 0;;\n}\n.list-filter {\n  color: var(--gray-3);\n  margin-right: 0.1em;\n  padding: 0.3em 0.7em 0.2em 0.7em;\n  border-radius: 100px;\n  transition: color 0.15s, background-color 0.2s;\n  cursor: pointer;\n}\n.list-filter:hover {\n  background-color: var(--gray-7);\n}\n.list-filter-selected {\n  color: white;\n  margin-right: 0.5em;\n  background-color: var(--gray-5);\n}\n.list-content-main {\nfont-size: 0.98em;\n}\n.section-header {\n  width: 100%;\n  padding-bottom: 0.6em;\n  /* background-color: var(--gray-8); */\n  /* margin-bottom: 0.6em; */\n  /* border-bottom: 1px solid var(--gray-5); */\n}\n.section-header h2 {\n  font-size: 1.05em;\n  font-weight: 700;\n  text-transform: uppercase;\n  letter-spacing: 0.13em;\n  color: var(--gray-1);\n}\n.list-items {\n}\n.list-item {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 0.4em 0;\n  cursor: pointer;\n  transition: color 0.2s;\n  /* position: relative; */\n}\n.list-item:hover {\n  color: var(--gray-3);\n}\n.list-item-completed div {\n  text-decoration: line-through;\n  color: var(--gray-5);\n}\n.list-item-completed .list-item-box {\n  background-color: var(--gray-6);\n}\n.list-item-box {\n  margin-right: 0.5em;\n  width: 1em;\n  height: 1em;\n  border: 1px solid var(--gray-4);\n  border-radius: 100px;\n  display: inline-block;\n  position: relative;\n  /* top: 0.25em; */\n}\n.list-item-label {\n  color: var(--gray-4);\n  margin-left: 0.5em;\n  margin-top: -0.5em;\n  margin-bottom: -0.5em;\n  padding: 0.2em 0.6em 0.2em 0.7em;\n  border-radius: 100px;\n  border: 1px solid var(--gray-4);\n  font-size: 0.75em;\n  display: inline-block;\n  position: relative;\n  bottom: 0.05em;\n}\n.item-name {\n  display: inline-block;\n}\n.item-details {\n  padding-top: 0.3em;\n  display: flex;\n  flex-direction: row;\n  font-size: 0.88em;\n}\n.item-details div {\n  font-weight: 600;\n  padding-right: 0.7em;\n}\n.item-due-date {\n  color: var(--forest-1);\n}\n.item-duration {\n  color: var(--forest-1);\n}\n.item-notes {\n  color: var(--yellow-1);\n}\n.add-dialog {\n  width: 80%;\n  padding: 1em;\n  border: 1px solid var(--gray-6);\n  border-radius: 0.5em;\n  margin-top: 0.75em;\n}\n.a-d-name {\n  /* font-size: 1em; */\n  font-weight: 700;\n  box-sizing: border-box;\n  width: 100%;\n  margin-bottom: 2px;\n}\n.a-d-notes {\n  font-family: 'Source Sans Pro', 'Helvetica', 'Arial', sans-serif;\n  box-sizing: border-box;\n  width: 100%;\n  height: 4.4em;\n}\n.a-d-footer {\n  box-sizing: border-box;\n  display: grid;\n  grid-template-columns: 31% 22.5% 22.5% 22.5%;\n  column-gap: 0.5%;\n}\n.a-d-date {\n  /* box-sizing: border-box; */\n  font-family: 'Source Sans Pro', 'Helvetica', 'Arial', sans-serif;\n}\n.a-d-list {\n  /* box-sizing: border-box; */\n}\n.a-d-priority {\n  /* box-sizing: border-box; */\n}\n.a-d-duration {\n  /* box-sizing: border-box; */\n}\n.add-task-btn {\n  padding: 0.3em 0.8em;\n  margin: 0.6em 0.1em 0 1em;\n}\n.cancel-task-btn {\n  padding: 0.3em 0.8em;\n  margin: 0.6em 0 0 0.1em;\n}\n.context-menu {\n  color: var(--gray-8);\n  position: absolute;\n  cursor: pointer;\n}\n.context-menu-delete {\n  background-color: var(--gray-0);\n  padding: 0.5em 0.75em;\n  transition: background-color 0.2s;\n}\n.context-menu-delete:hover {\n  background-color: var(--blue-1);\n}\np {\n  line-height: 1.4em;\n}"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var a={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var s=0;s<n.length;s++){var d=[].concat(n[s]);r&&a[d[0]]||(t&&(d[2]?d[2]="".concat(t," and ").concat(d[2]):d[2]=t),e.push(d))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,a=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=t){var r,a,o=[],i=!0,s=!1;try{for(t=t.call(n);!(i=(r=t.next()).done)&&(o.push(r.value),!e||o.length!==e);i=!0);}catch(n){s=!0,a=n}finally{try{i||null==t.return||t.return()}finally{if(s)throw a}}return o}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],i=a[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),A="/*# ".concat(d," */"),l=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[o].concat(l).concat([A]).join("\n")}return[o].join("\n")}},695:n=>{var e={};n.exports=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},i=[],s=0;s<n.length;s++){var d=n[s],A=r.base?d[0]+r.base:d[0],l=o[A]||0,c="".concat(A," ").concat(l);o[A]=l+1;var u=t(c),m={css:d[1],media:d[2],sourceMap:d[3]};-1!==u?(e[u].references++,e[u].updater(m)):e.push({identifier:c,updater:a(m,r),references:1}),i.push(c)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=t(o[i]);e[s].references--}for(var d=r(n,a),A=0;A<o.length;A++){var l=t(o[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=d}}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e),e}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r=t.css,a=t.media,o=t.sourceMap;a?n.setAttribute("media",a):n.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=t(379),e=t.n(n),r=t(795),a=t.n(r),o=t(695),i=t.n(o),s=t(216),d=t.n(s),A=t(212),l={styleTagTransform:function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}},setAttributes:function(n){var e=t.nc;e&&n.setAttribute("nonce",e)},insert:function(n){var e=i()("head");if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(n)}};l.domAPI=a(),l.insertStyleElement=d(),e()(A.Z,l),A.Z&&A.Z.locals&&A.Z.locals;var c=t(426),u={styleTagTransform:function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}},setAttributes:function(n){var e=t.nc;e&&n.setAttribute("nonce",e)},insert:function(n){var e=i()("head");if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(n)}};function m(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function g(n){m(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function h(n){m(1,arguments);var e=g(n);return!isNaN(e)}u.domAPI=a(),u.insertStyleElement=d(),e()(c.Z,u),c.Z&&c.Z.locals&&c.Z.locals;var f={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function C(n){return function(e){var t=e||{},r=t.width?String(t.width):n.defaultWidth;return n.formats[r]||n.formats[n.defaultWidth]}}var b,p={date:C({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:C({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:C({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},B={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function v(n){return function(e,t){var r,a=t||{};if("formatting"===(a.context?String(a.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,i=a.width?String(a.width):o;r=n.formattingValues[i]||n.formattingValues[o]}else{var s=n.defaultWidth,d=a.width?String(a.width):n.defaultWidth;r=n.values[d]||n.values[s]}return r[n.argumentCallback?n.argumentCallback(e):e]}}function E(n){return function(e,t){var r=String(e),a=t||{},o=a.width,i=o&&n.matchPatterns[o]||n.matchPatterns[n.defaultMatchWidth],s=r.match(i);if(!s)return null;var d,A=s[0],l=o&&n.parsePatterns[o]||n.parsePatterns[n.defaultParseWidth];return d="[object Array]"===Object.prototype.toString.call(l)?function(n,e){for(var t=0;t<n.length;t++)if(n[t].test(A))return t}(l):function(n,e){for(var t in n)if(n.hasOwnProperty(t)&&n[t].test(A))return t}(l),d=n.valueCallback?n.valueCallback(d):d,{value:d=a.valueCallback?a.valueCallback(d):d,rest:r.slice(A.length)}}}const y={code:"en-US",formatDistance:function(n,e,t){var r;return t=t||{},r="string"==typeof f[n]?f[n]:1===e?f[n].one:f[n].other.replace("{{count}}",e),t.addSuffix?t.comparison>0?"in "+r:r+" ago":r},formatLong:p,formatRelative:function(n,e,t,r){return B[n]},localize:{ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:v({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:v({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return Number(n)-1}}),month:v({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:v({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:v({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(b={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n,e){var t=String(n),r=e||{},a=t.match(b.matchPattern);if(!a)return null;var o=a[0],i=t.match(b.parsePattern);if(!i)return null;var s=b.valueCallback?b.valueCallback(i[0]):i[0];return{value:s=r.valueCallback?r.valueCallback(s):s,rest:t.slice(o.length)}}),era:E({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:E({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:E({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:E({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:E({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function w(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function x(n,e){m(2,arguments);var t=g(n).getTime(),r=w(e);return new Date(t+r)}function k(n,e){m(2,arguments);var t=w(e);return x(n,-t)}function T(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const M=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return T("yy"===e?r%100:r,e.length)},S=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):T(t+1,2)},q=function(n,e){return T(n.getUTCDate(),e.length)},D=function(n,e){return T(n.getUTCHours()%12||12,e.length)},z=function(n,e){return T(n.getUTCHours(),e.length)},L=function(n,e){return T(n.getUTCMinutes(),e.length)},j=function(n,e){return T(n.getUTCSeconds(),e.length)},P=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return T(Math.floor(r*Math.pow(10,t-3)),e.length)};var U=864e5;function W(n){m(1,arguments);var e=1,t=g(n),r=t.getUTCDay(),a=(r<e?7:0)+r-e;return t.setUTCDate(t.getUTCDate()-a),t.setUTCHours(0,0,0,0),t}function Y(n){m(1,arguments);var e=g(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var a=W(r),o=new Date(0);o.setUTCFullYear(t,0,4),o.setUTCHours(0,0,0,0);var i=W(o);return e.getTime()>=a.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}function N(n){m(1,arguments);var e=Y(n),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var r=W(t);return r}var O=6048e5;function H(n,e){m(1,arguments);var t=e||{},r=t.locale,a=r&&r.options&&r.options.weekStartsOn,o=null==a?0:w(a),i=null==t.weekStartsOn?o:w(t.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=g(n),d=s.getUTCDay(),A=(d<i?7:0)+d-i;return s.setUTCDate(s.getUTCDate()-A),s.setUTCHours(0,0,0,0),s}function X(n,e){m(1,arguments);var t=g(n,e),r=t.getUTCFullYear(),a=e||{},o=a.locale,i=o&&o.options&&o.options.firstWeekContainsDate,s=null==i?1:w(i),d=null==a.firstWeekContainsDate?s:w(a.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var A=new Date(0);A.setUTCFullYear(r+1,0,d),A.setUTCHours(0,0,0,0);var l=H(A,e),c=new Date(0);c.setUTCFullYear(r,0,d),c.setUTCHours(0,0,0,0);var u=H(c,e);return t.getTime()>=l.getTime()?r+1:t.getTime()>=u.getTime()?r:r-1}function F(n,e){m(1,arguments);var t=e||{},r=t.locale,a=r&&r.options&&r.options.firstWeekContainsDate,o=null==a?1:w(a),i=null==t.firstWeekContainsDate?o:w(t.firstWeekContainsDate),s=X(n,e),d=new Date(0);d.setUTCFullYear(s,0,i),d.setUTCHours(0,0,0,0);var A=H(d,e);return A}var G=6048e5;function R(n,e){var t=n>0?"-":"+",r=Math.abs(n),a=Math.floor(r/60),o=r%60;if(0===o)return t+String(a);var i=e||"";return t+String(a)+i+T(o,2)}function Q(n,e){return n%60==0?(n>0?"-":"+")+T(Math.abs(n)/60,2):I(n,e)}function I(n,e){var t=e||"",r=n>0?"-":"+",a=Math.abs(n);return r+T(Math.floor(a/60),2)+t+T(a%60,2)}const Z={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});case"GGGG":default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),a=r>0?r:1-r;return t.ordinalNumber(a,{unit:"year"})}return M(n,e)},Y:function(n,e,t,r){var a=X(n,r),o=a>0?a:1-a;return"YY"===e?T(o%100,2):"Yo"===e?t.ordinalNumber(o,{unit:"year"}):T(o,e.length)},R:function(n,e){return T(Y(n),e.length)},u:function(n,e){return T(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return T(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return T(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return S(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return T(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var a=function(n,e){m(1,arguments);var t=g(n),r=H(t,e).getTime()-F(t,e).getTime();return Math.round(r/G)+1}(n,r);return"wo"===e?t.ordinalNumber(a,{unit:"week"}):T(a,e.length)},I:function(n,e,t){var r=function(n){m(1,arguments);var e=g(n),t=W(e).getTime()-N(e).getTime();return Math.round(t/O)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):T(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):q(n,e)},D:function(n,e,t){var r=function(n){m(1,arguments);var e=g(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),a=t-r;return Math.floor(a/U)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):T(r,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});case"EEEE":default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var a=n.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return T(o,2);case"eo":return t.ordinalNumber(o,{unit:"day"});case"eee":return t.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(a,{width:"short",context:"formatting"});case"eeee":default:return t.day(a,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var a=n.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return T(o,e.length);case"co":return t.ordinalNumber(o,{unit:"day"});case"ccc":return t.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(a,{width:"narrow",context:"standalone"});case"cccccc":return t.day(a,{width:"short",context:"standalone"});case"cccc":default:return t.day(a,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return T(a,e.length);case"io":return t.ordinalNumber(a,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});case"iiii":default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,a=n.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,a=n.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return D(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):z(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):T(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):T(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):L(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):j(n,e)},S:function(n,e){return P(n,e)},X:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return Q(a);case"XXXX":case"XX":return I(a);case"XXXXX":case"XXX":default:return I(a,":")}},x:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return Q(a);case"xxxx":case"xx":return I(a);case"xxxxx":case"xxx":default:return I(a,":")}},O:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+R(a,":");case"OOOO":default:return"GMT"+I(a,":")}},z:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+R(a,":");case"zzzz":default:return"GMT"+I(a,":")}},t:function(n,e,t,r){var a=r._originalDate||n;return T(Math.floor(a.getTime()/1e3),e.length)},T:function(n,e,t,r){return T((r._originalDate||n).getTime(),e.length)}};function J(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});case"PPPP":default:return e.date({width:"full"})}}function _(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});case"pppp":default:return e.time({width:"full"})}}const V={p:_,P:function(n,e){var t,r=n.match(/(P+)(p+)?/),a=r[1],o=r[2];if(!o)return J(n,e);switch(a){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;case"PPPP":default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",J(a,e)).replace("{{time}}",_(o,e))}};function $(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var K=["D","DD"],nn=["YY","YYYY"];function en(n){return-1!==K.indexOf(n)}function tn(n){return-1!==nn.indexOf(n)}function rn(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"))}var an=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,on=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,sn=/^'([^]*?)'?$/,dn=/''/g,An=/[a-zA-Z]/;function ln(n){return n.match(sn)[1].replace(dn,"'")}const cn=(n,e,t,r,a,o)=>!0,un=n=>{let e=null;const t=(n,t,r)=>{t.forEach((t=>{if(n.endsWith(t)){let a=parseFloat(n.substring(0,n.length-t.length));Number.isFinite(a)&&a>=0&&(e=a+r)}}))};return t(n,["m","min","minute","minutes"],"min"),t(n,["h","hr","hrs","hour","hours"],"hr"),e},mn=(()=>{let n=0;return{addTask:({name:e,notes:t,dueDate:r,list:a,duration:o,priority:i},s)=>{const d=((n,e,t,r,a,o,i)=>{const s=new Date(Date.now());return{name:n,notes:e,dueDate:t,list:r,duration:a,priority:o,id:i,startDate:s,completed:!1,getDuedateShorthand:()=>{const n=new Date(Date.now()),e=(t.getTime()-n.getTime())/1e3/60/60/24;return e<-1?"Overdue":e<0?"Today":e<1?"Tomorrow":function(n,e,t){m(2,arguments);var r=String(e),a=t||{},o=a.locale||y,i=o.options&&o.options.firstWeekContainsDate,s=null==i?1:w(i),d=null==a.firstWeekContainsDate?s:w(a.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var A=o.options&&o.options.weekStartsOn,l=null==A?0:w(A),c=null==a.weekStartsOn?l:w(a.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var u=g(n);if(!h(u))throw new RangeError("Invalid time value");var f=$(u),C=k(u,f),b={firstWeekContainsDate:d,weekStartsOn:c,locale:o,_originalDate:u};return r.match(on).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,V[e])(n,o.formatLong,b):n})).join("").match(an).map((function(t){if("''"===t)return"'";var r=t[0];if("'"===r)return ln(t);var i=Z[r];if(i)return!a.useAdditionalWeekYearTokens&&tn(t)&&rn(t,e,n),!a.useAdditionalDayOfYearTokens&&en(t)&&rn(t,e,n),i(C,t,o.localize,b);if(r.match(An))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("")}(t,e<6?"EEEE":"MMM d")},getDurationShorthand:()=>{}}})(e,t,r,a,o,i,n);s.addTodo(d),n++},removeTask:(n,e)=>{e.removeTodo(n),gn.clearList(),gn.displayList(e)},getId:()=>n}})(),gn=(()=>{document.querySelector("#add-task").addEventListener("click",(()=>{n()})),document.addEventListener("keydown",(function(e){e.shiftKey&&"N"==e.key&&null==document.querySelector(".add-area")&&(e.preventDefault(),n())}));const n=()=>{if(null!=document.querySelector(".add-area"))return!1;{const n=document.createElement("div");n.classList.add("add-area");const a=document.createElement("div");a.classList.add("add-dialog");const o=document.createElement("input");o.classList.add("a-d-name"),o.autocomplete="chrome-off",o.placeholder="Name";const i=document.createElement("textarea");i.classList.add("a-d-notes"),i.placeholder="Notes",i.maxLength="200";const s=document.createElement("div");s.classList.add("a-d-footer");const d=document.createElement("input");d.classList.add("a-d-date"),d.type="date";const A=document.createElement("input");A.classList.add("a-d-list"),A.placeholder="list";const l=document.createElement("input");l.classList.add("a-d-priority"),l.placeholder="priority";const c=document.createElement("input");c.classList.add("a-d-duration"),c.placeholder="duration";const u=document.createElement("button");u.classList.add("add-task-btn"),u.innerText="Add task",u.addEventListener("click",(()=>{g()}));const m=document.createElement("button");m.classList.add("cancel-task-btn"),m.innerText="Cancel",m.addEventListener("click",(()=>{e()})),s.appendChild(d),s.appendChild(A),s.appendChild(l),s.appendChild(c),a.appendChild(o),a.appendChild(i),a.appendChild(s),n.appendChild(a),n.appendChild(u),n.appendChild(m),n.addEventListener("keydown",(function(n){"Enter"==n.key?g():"Escape"==n.key&&e()})),document.querySelector(".list-content-main").appendChild(n),o.focus();const g=()=>{cn(o.value,i.value,d.value,A.value,l.value,c.value)&&(mn.addTask(h(),hn.getCurrentList()),t(),r(hn.getCurrentList()),e())},h=()=>{const n=o.value,e=i.value,t=null;d.value&&(t=new Date(f(d.value)));const r=A.value,a=l.value;return{name:n,notes:e,dueDate:t,list:r,duration:un(c.value),priority:a}},f=n=>{let e="";return e+=n.slice(5),e+="-",e+=n.slice(0,4),e};return!0}},e=()=>{document.querySelector(".add-area").remove()},t=()=>{document.querySelector(".list-items").remove()},r=n=>{const e=document.querySelector(".list-content-main"),t=document.createElement("div");t.classList.add("list-items"),e.appendChild(t),n.todos.forEach((n=>{a(n)}))},a=n=>{const e=document.querySelector(".list-items"),t=document.createElement("div");t.classList.add("list-item"),t.dataset.id=n.id;const r=document.createElement("div");r.classList.add("list-item-box");const a=document.createElement("div");a.classList.add("item-info");const i=document.createElement("div");i.classList.add("item-name"),i.innerText=n.name;const s=document.createElement("div");if(s.classList.add("item-details"),n.dueDate){const e=document.createElement("div");e.classList.add("item-due-date"),e.innerText=n.getDuedateShorthand(),s.appendChild(e)}if(n.duration){const e=document.createElement("div");e.classList.add("item-duration"),e.innerText=n.duration,s.appendChild(e)}if(n.notes){const n=document.createElement("div");n.classList.add("item-notes"),n.innerText="Notes",s.appendChild(n)}a.appendChild(i),s.hasChildNodes()&&a.appendChild(s),t.appendChild(r),t.appendChild(a),e.appendChild(t),1==n.completed&&t.classList.add("list-item-completed"),t.addEventListener("contextmenu",(function(n){o(n),n.preventDefault()}),!1),r.addEventListener("click",(function(n){hn.getCurrentList().toggleCompleted(n.target.parentElement.dataset.id)?r.parentElement.classList.add("list-item-completed"):r.parentElement.classList.remove("list-item-completed")}))},o=n=>{const e=document.querySelector(".context-menu");null!=e&&e.remove();let t=n.target;"list-item"!=t.classList[0]&&(t=t.parentElement);const r=document.createElement("div");r.classList.add("context-menu");const a=document.createElement("div");a.classList.add("context-menu-delete"),a.innerText="Delete",a.addEventListener("click",(function(n){mn.removeTask(t.dataset.id,hn.getCurrentList()),r.remove()})),r.appendChild(a),t.parentElement.appendChild(r),t.parentElement.getBoundingClientRect();const o=n.clientX,i=n.clientY;r.style.top=`${i}px`,r.style.left=`${o}px`,document.addEventListener("click",(function(n){n.target!=r&&r.remove()}))};return{clearList:t,displayList:r,displayTask:a,makeAddArea:n}})(),hn=(()=>{let n=((n,e)=>{const t=[],r=n=>t.findIndex((e=>{if(e.id==n)return!0}));return{name:"Inbox",description:"Description of inbox",todos:t,addTodo:n=>{t.push(n)},removeTodo:n=>{const e=r(n);t.splice(e,1)},toggleCompleted:n=>{const e=r(n);return 0==t[e].completed?(t[e].completed=!0,!0):(t[e].completed=!1,!1)}}})();return mn.addTask({name:"Book flights",dueDate:new Date("07-13-2021"),notes:"I have notes"},n),mn.addTask({name:"Read about the metro"},n),mn.addTask({name:"Borrow Sarah's travel guide",duration:"45min"},n),mn.addTask({name:"Book a hotel room"},n),gn.displayList(n),{getCurrentList:()=>n}})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,